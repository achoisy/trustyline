{
  "address": "0xF1C3328e7321D8C1C17F0C466b4C34B5484BA0aa",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "Log",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "LogBytes",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FACTORY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TokenFactoryLevel",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accountRules",
      "outputs": [
        {
          "internalType": "contract IAccountRules",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "deployToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factoryRecords",
      "outputs": [
        {
          "internalType": "contract IFactoryRecords",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accountRules",
          "type": "address"
        }
      ],
      "name": "setAccountRules",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factoryRecords",
          "type": "address"
        }
      ],
      "name": "setFactoryRecords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_subscriptionService",
          "type": "address"
        }
      ],
      "name": "setSubscriptionService",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptionService",
      "outputs": [
        {
          "internalType": "contract ISubscriptionHandler",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x17572bfcd8edcb6dfe203f6f1cd7834c101cdc316c600d735530a7f0cbac3b66",
  "receipt": {
    "to": null,
    "from": "0xBeee02B6884e92Ac9a4477b4A045E86B49A7EBd3",
    "contractAddress": "0xF1C3328e7321D8C1C17F0C466b4C34B5484BA0aa",
    "transactionIndex": 0,
    "gasUsed": "3589246",
    "logsBloom": "0x00000004000000000000000000000000000100000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000002000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000200000000000000000000000000000000000000000000000000100000000020002000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x7751a4fd2521e4c1f1c460236e8f6ed5bb5340b9d738f7b682db2e49c62cb58a",
    "transactionHash": "0x17572bfcd8edcb6dfe203f6f1cd7834c101cdc316c600d735530a7f0cbac3b66",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5,
        "transactionHash": "0x17572bfcd8edcb6dfe203f6f1cd7834c101cdc316c600d735530a7f0cbac3b66",
        "address": "0xF1C3328e7321D8C1C17F0C466b4C34B5484BA0aa",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xdfbefbf47cfe66b701d8cfdbce1de81c821590819cb07e71cb01b6602fb0ee27",
          "0x000000000000000000000000beee02b6884e92ac9a4477b4a045e86b49a7ebd3",
          "0x000000000000000000000000beee02b6884e92ac9a4477b4a045e86b49a7ebd3"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x7751a4fd2521e4c1f1c460236e8f6ed5bb5340b9d738f7b682db2e49c62cb58a"
      }
    ],
    "blockNumber": 5,
    "cumulativeGasUsed": "3589246",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "22492bf2bddef8a64cedc5d6d8d5e9ff",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"LogBytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FACTORY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TokenFactoryLevel\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountRules\",\"outputs\":[{\"internalType\":\"contract IAccountRules\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"deployToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryRecords\",\"outputs\":[{\"internalType\":\"contract IFactoryRecords\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accountRules\",\"type\":\"address\"}],\"name\":\"setAccountRules\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factoryRecords\",\"type\":\"address\"}],\"name\":\"setFactoryRecords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_subscriptionService\",\"type\":\"address\"}],\"name\":\"setSubscriptionService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionService\",\"outputs\":[{\"internalType\":\"contract ISubscriptionHandler\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Overload {grantRole} to track enumerable memberships\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Overload {renounceRole} to track enumerable memberships\"},\"revokeRole(bytes32,address)\":{\"details\":\"Overload {revokeRole} to track enumerable memberships\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mainfactory.sol\":\"MainFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n}\\n\",\"keccak256\":\"0x313834fba9dbefee1df7717a5e3063ebf567d276e67bc925a03c7f8423f4c50e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6a9a31f278ee3ed0568ab7e3c09ecb72bf92f922475a274760b4c58f87f9ad0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/ERC777.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC777.sol\\\";\\nimport \\\"./IERC777Recipient.sol\\\";\\nimport \\\"./IERC777Sender.sol\\\";\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/IERC1820Registry.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC777} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * Support for ERC20 is included in this contract, as specified by the EIP: both\\n * the ERC777 and ERC20 interfaces can be safely used when interacting with it.\\n * Both {IERC777-Sent} and {IERC20-Transfer} events are emitted on token\\n * movements.\\n *\\n * Additionally, the {IERC777-granularity} value is hard-coded to `1`, meaning that there\\n * are no special restrictions in the amount of tokens that created, moved, or\\n * destroyed. This makes integration with ERC20 applications seamless.\\n */\\ncontract ERC777 is Context, IERC777, IERC20 {\\n    using Address for address;\\n\\n    IERC1820Registry internal constant _ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\n\\n    mapping(address => uint256) private _balances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    bytes32 private constant _TOKENS_SENDER_INTERFACE_HASH = keccak256(\\\"ERC777TokensSender\\\");\\n    bytes32 private constant _TOKENS_RECIPIENT_INTERFACE_HASH = keccak256(\\\"ERC777TokensRecipient\\\");\\n\\n    // This isn't ever read from - it's only used to respond to the defaultOperators query.\\n    address[] private _defaultOperatorsArray;\\n\\n    // Immutable, but accounts may revoke them (tracked in __revokedDefaultOperators).\\n    mapping(address => bool) private _defaultOperators;\\n\\n    // For each account, a mapping of its operators and revoked default operators.\\n    mapping(address => mapping(address => bool)) private _operators;\\n    mapping(address => mapping(address => bool)) private _revokedDefaultOperators;\\n\\n    // ERC20-allowances\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    /**\\n     * @dev `defaultOperators` may be an empty array.\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address[] memory defaultOperators_\\n    ) {\\n        _name = name_;\\n        _symbol = symbol_;\\n\\n        _defaultOperatorsArray = defaultOperators_;\\n        for (uint256 i = 0; i < defaultOperators_.length; i++) {\\n            _defaultOperators[defaultOperators_[i]] = true;\\n        }\\n\\n        // register interfaces\\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\\\"ERC777Token\\\"), address(this));\\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\\\"ERC20Token\\\"), address(this));\\n    }\\n\\n    /**\\n     * @dev See {IERC777-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-decimals}.\\n     *\\n     * Always returns 18, as per the\\n     * [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).\\n     */\\n    function decimals() public pure virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-granularity}.\\n     *\\n     * This implementation always returns `1`.\\n     */\\n    function granularity() public view virtual override returns (uint256) {\\n        return 1;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override(IERC20, IERC777) returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`tokenHolder`).\\n     */\\n    function balanceOf(address tokenHolder) public view virtual override(IERC20, IERC777) returns (uint256) {\\n        return _balances[tokenHolder];\\n    }\\n\\n    /**\\n     * @dev See {IERC777-send}.\\n     *\\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\\n     */\\n    function send(\\n        address recipient,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        _send(_msgSender(), recipient, amount, data, \\\"\\\", true);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient}\\n     * interface if it is a contract.\\n     *\\n     * Also emits a {Sent} event.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        require(recipient != address(0), \\\"ERC777: transfer to the zero address\\\");\\n\\n        address from = _msgSender();\\n\\n        _callTokensToSend(from, from, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        _move(from, from, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        _callTokensReceived(from, from, recipient, amount, \\\"\\\", \\\"\\\", false);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-burn}.\\n     *\\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\\n     */\\n    function burn(uint256 amount, bytes memory data) public virtual override {\\n        _burn(_msgSender(), amount, data, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC777-isOperatorFor}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) public view virtual override returns (bool) {\\n        return\\n            operator == tokenHolder ||\\n            (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||\\n            _operators[tokenHolder][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC777-authorizeOperator}.\\n     */\\n    function authorizeOperator(address operator) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC777: authorizing self as operator\\\");\\n\\n        if (_defaultOperators[operator]) {\\n            delete _revokedDefaultOperators[_msgSender()][operator];\\n        } else {\\n            _operators[_msgSender()][operator] = true;\\n        }\\n\\n        emit AuthorizedOperator(operator, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC777-revokeOperator}.\\n     */\\n    function revokeOperator(address operator) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC777: revoking self as operator\\\");\\n\\n        if (_defaultOperators[operator]) {\\n            _revokedDefaultOperators[_msgSender()][operator] = true;\\n        } else {\\n            delete _operators[_msgSender()][operator];\\n        }\\n\\n        emit RevokedOperator(operator, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC777-defaultOperators}.\\n     */\\n    function defaultOperators() public view virtual override returns (address[] memory) {\\n        return _defaultOperatorsArray;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-operatorSend}.\\n     *\\n     * Emits {Sent} and {IERC20-Transfer} events.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes memory data,\\n        bytes memory operatorData\\n    ) public virtual override {\\n        require(isOperatorFor(_msgSender(), sender), \\\"ERC777: caller is not an operator for holder\\\");\\n        _send(sender, recipient, amount, data, operatorData, true);\\n    }\\n\\n    /**\\n     * @dev See {IERC777-operatorBurn}.\\n     *\\n     * Emits {Burned} and {IERC20-Transfer} events.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes memory data,\\n        bytes memory operatorData\\n    ) public virtual override {\\n        require(isOperatorFor(_msgSender(), account), \\\"ERC777: caller is not an operator for holder\\\");\\n        _burn(account, amount, data, operatorData);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     *\\n     * Note that operator and allowance concepts are orthogonal: operators may\\n     * not have allowance, and accounts with allowance may not be operators\\n     * themselves.\\n     */\\n    function allowance(address holder, address spender) public view virtual override returns (uint256) {\\n        return _allowances[holder][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Note that accounts cannot have allowance issued by their operators.\\n     */\\n    function approve(address spender, uint256 value) public virtual override returns (bool) {\\n        address holder = _msgSender();\\n        _approve(holder, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Note that operator and allowance concepts are orthogonal: operators cannot\\n     * call `transferFrom` (unless they have allowance), and accounts with\\n     * allowance cannot call `operatorSend` (unless they are operators).\\n     *\\n     * Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events.\\n     */\\n    function transferFrom(\\n        address holder,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        require(recipient != address(0), \\\"ERC777: transfer to the zero address\\\");\\n        require(holder != address(0), \\\"ERC777: transfer from the zero address\\\");\\n\\n        address spender = _msgSender();\\n\\n        _callTokensToSend(spender, holder, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        _move(spender, holder, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        uint256 currentAllowance = _allowances[holder][spender];\\n        require(currentAllowance >= amount, \\\"ERC777: transfer amount exceeds allowance\\\");\\n        _approve(holder, spender, currentAllowance - amount);\\n\\n        _callTokensReceived(spender, holder, recipient, amount, \\\"\\\", \\\"\\\", false);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `operator`, `data` and `operatorData`.\\n     *\\n     * See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits {Minted} and {IERC20-Transfer} events.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - if `account` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    ) internal virtual {\\n        _mint(account, amount, userData, operatorData, true);\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * If `requireReceptionAck` is set to true, and if a send hook is\\n     * registered for `account`, the corresponding function will be called with\\n     * `operator`, `data` and `operatorData`.\\n     *\\n     * See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits {Minted} and {IERC20-Transfer} events.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - if `account` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData,\\n        bool requireReceptionAck\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC777: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, amount);\\n\\n        // Update state variables\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n\\n        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, requireReceptionAck);\\n\\n        emit Minted(operator, account, amount, userData, operatorData);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Send tokens\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\\n     */\\n    function _send(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData,\\n        bool requireReceptionAck\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC777: send from the zero address\\\");\\n        require(to != address(0), \\\"ERC777: send to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _callTokensToSend(operator, from, to, amount, userData, operatorData);\\n\\n        _move(operator, from, to, amount, userData, operatorData);\\n\\n        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\\n    }\\n\\n    /**\\n     * @dev Burn tokens\\n     * @param from address token holder address\\n     * @param amount uint256 amount of tokens to burn\\n     * @param data bytes extra information provided by the token holder\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     */\\n    function _burn(\\n        address from,\\n        uint256 amount,\\n        bytes memory data,\\n        bytes memory operatorData\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC777: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _callTokensToSend(operator, from, address(0), amount, data, operatorData);\\n\\n        _beforeTokenTransfer(operator, from, address(0), amount);\\n\\n        // Update state variables\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC777: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Burned(operator, from, amount, data, operatorData);\\n        emit Transfer(from, address(0), amount);\\n    }\\n\\n    function _move(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    ) private {\\n        _beforeTokenTransfer(operator, from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC777: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Sent(operator, from, to, amount, userData, operatorData);\\n        emit Transfer(from, to, amount);\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_approve}.\\n     *\\n     * Note that accounts cannot have allowance issued by their operators.\\n     */\\n    function _approve(\\n        address holder,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(holder != address(0), \\\"ERC777: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC777: approve to the zero address\\\");\\n\\n        _allowances[holder][spender] = value;\\n        emit Approval(holder, spender, value);\\n    }\\n\\n    /**\\n     * @dev Call from.tokensToSend() if the interface is registered\\n     * @param operator address operator requesting the transfer\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     */\\n    function _callTokensToSend(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    ) private {\\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(from, _TOKENS_SENDER_INTERFACE_HASH);\\n        if (implementer != address(0)) {\\n            IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\\n        }\\n    }\\n\\n    /**\\n     * @dev Call to.tokensReceived() if the interface is registered. Reverts if the recipient is a contract but\\n     * tokensReceived() was not registered for the recipient\\n     * @param operator address operator requesting the transfer\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\\n     */\\n    function _callTokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData,\\n        bool requireReceptionAck\\n    ) private {\\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(to, _TOKENS_RECIPIENT_INTERFACE_HASH);\\n        if (implementer != address(0)) {\\n            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\\n        } else if (requireReceptionAck) {\\n            require(!to.isContract(), \\\"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes\\n     * calls to {send}, {transfer}, {operatorSend}, minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd8053b19ac17e693d70bd9753f206d2f9db1d29b056f6619c56b140d266da5d1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777Token standard as defined in the EIP.\\n *\\n * This contract uses the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\\n * token holders and recipients react to token movements by using setting implementers\\n * for the associated interfaces in said registry. See {IERC1820Registry} and\\n * {ERC1820Implementer}.\\n */\\ninterface IERC777 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     * means all token operations (creation, movement and destruction) must have\\n     * amounts that are a multiple of this number.\\n     *\\n     * For most token contracts, this value will equal 1.\\n     */\\n    function granularity() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * If send or receive hooks are registered for the caller and `recipient`,\\n     * the corresponding functions will be called with `data` and empty\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function send(\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See {operatorSend} and {operatorBurn}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external;\\n\\n    /**\\n     * @dev Revoke an account's operator status for the caller.\\n     *\\n     * See {isOperatorFor} and {defaultOperators}.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external;\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if {authorizeOperator} was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\\n     */\\n    function defaultOperators() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    event Sent(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bytes data,\\n        bytes operatorData\\n    );\\n\\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\\n\\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\\n\\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\\n\\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\\n}\\n\",\"keccak256\":\"0xc1e11e6758e8c83fc43e71e63dc1a211cace8a5912bbf06e697bc2148069800f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Recipient {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0fd59f83d16f090c27a8105db0f4ad05b0f5d127f9878b82ebf0ad2bbc4e3f03\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/IERC777Sender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensSender standard as defined in the EIP.\\n *\\n * {IERC777} Token holders can be notified of operations performed on their\\n * tokens by having a contract implement this interface (contract holders can be\\n * their own implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Sender {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever a registered holder's\\n     * (`from`) tokens are about to be moved or destroyed. The type of operation\\n     * is conveyed by `to` being the zero address or not.\\n     *\\n     * This call occurs _before_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the pre-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensToSend(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfa4e8ef2081a436b65450d1b8c1142b448f57b19b5b660f0218b3a02d3e9d995\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\n * implementers for interfaces in this registry, as well as query support.\\n *\\n * Implementers may be shared by multiple accounts, and can also implement more\\n * than a single interface for each account. Contracts can implement interfaces\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\n * contract.\\n *\\n * {IERC165} interfaces can also be queried via the registry.\\n *\\n * For an in-depth explanation and source code analysis, see the EIP text.\\n */\\ninterface IERC1820Registry {\\n    /**\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\n     * account is able to set interface implementers for it.\\n     *\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\n     * `newManager` will reset the manager to this initial state.\\n     *\\n     * Emits a {ManagerChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     */\\n    function setManager(address account, address newManager) external;\\n\\n    /**\\n     * @dev Returns the manager for `account`.\\n     *\\n     * See {setManager}.\\n     */\\n    function getManager(address account) external view returns (address);\\n\\n    /**\\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\\n     * `interfaceHash`.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     * The zero address can also be used in `implementer` to remove an old one.\\n     *\\n     * See {interfaceHash} to learn how these are created.\\n     *\\n     * Emits an {InterfaceImplementerSet} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\n     * end in 28 zeroes).\\n     * - `implementer` must implement {IERC1820Implementer} and return true when\\n     * queried for support, unless `implementer` is the caller. See\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function setInterfaceImplementer(\\n        address account,\\n        bytes32 _interfaceHash,\\n        address implementer\\n    ) external;\\n\\n    /**\\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\\n     * implementer is registered, returns the zero address.\\n     *\\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\n     * zeroes), `account` will be queried for support of it.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     */\\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\n     * corresponding\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\n     */\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n     * @param account Address of the contract for which to update the cache.\\n     * @param interfaceId ERC165 interface for which to update the cache.\\n     */\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\n\\n    /**\\n     * @notice Checks whether a contract implements an ERC165 interface or not.\\n     * If the result is not cached a direct lookup on the contract address is performed.\\n     * If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n     * {updateERC165Cache} with the contract address.\\n     * @param account Address of the contract to check.\\n     * @param interfaceId ERC165 interface to check.\\n     * @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\n     * @param account Address of the contract to check.\\n     * @param interfaceId ERC165 interface to check.\\n     * @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\n\\n    event ManagerChanged(address indexed account, address indexed newManager);\\n}\\n\",\"keccak256\":\"0xdf30b8f2bba82b86661928377f70ba4b68739a799f8bad36e542144811aa70d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/IFactoryRecords.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IFactoryRecords {\\n    struct ContractDepl {\\n        address deplAddr;\\n        address ownerAddr;\\n        bytes32 deplName;\\n        uint256 version;\\n    }\\n\\n    function addDepl(\\n        address _deplAddr,\\n        address _ownerAddr,\\n        bytes32 _deplName,\\n        uint256 _version\\n    ) external returns (bool res);\\n\\n    function removeDepl(address _deplAddr) external returns (bool res);\\n\\n    function getCountByContractName(bytes32 _deplName)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getCountByUserAddr(address _ownerAddr)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getContractDeplList()\\n        external\\n        view\\n        returns (ContractDepl[] memory);\\n}\\n\",\"keccak256\":\"0x6ab15c976089d920174743bddb5261024f504a8e80954ad7ba21414e0cce0a96\",\"license\":\"MIT\"},\"contracts/ISubscription.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ISubscriptionHandler {\\n    struct Subscription {\\n        uint8 level;\\n        uint256 endDate;\\n    }\\n\\n    function setSubscription(\\n        address userAddr,\\n        uint8 userLevel,\\n        uint256 userPeriod\\n    ) external;\\n\\n    function getSubscription(address userAddr)\\n        external\\n        view\\n        returns (Subscription memory);\\n\\n    function checkSubscription(address userAddr, uint8 contractLevel)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0xc46872462234855a1b4f7d73be49b0cc935e2d0e4cead9b96728532c3d9d7336\",\"license\":\"MIT\"},\"contracts/factory_contracts/privacy.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n// import \\\"hardhat/console.sol\\\";\\n// import \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Privacy {\\n    event PrivacyAddUser(\\n        address indexed tokenAddr,\\n        address indexed userAddr,\\n        uint256 index\\n    );\\n    event PrivacyRemoveUser(\\n        address indexed tokenAddr,\\n        address indexed userAddr\\n    );\\n    event PrivacySetPublic(address indexed tokenAddr, bool openToPublic);\\n\\n    bool public isPublic;\\n    address[] public usersAllowList;\\n    mapping(address => uint256) internal indexOf; //1 based indexing. 0 means non-existent\\n    address public owner;\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Sorry, action not allow by user\\\");\\n        _;\\n    }\\n\\n    function setPublic(bool openToPublic) public onlyOwner {\\n        isPublic = openToPublic;\\n        emit PrivacySetPublic(address(this), openToPublic);\\n    }\\n\\n    function addUser(address userAddr) public onlyOwner {\\n        if (indexOf[userAddr] == 0) {\\n            usersAllowList.push(userAddr);\\n            uint256 index = usersAllowList.length;\\n            indexOf[userAddr] = index;\\n            emit PrivacyAddUser(address(this), userAddr, index);\\n        }\\n    }\\n\\n    function getUserList() public view returns (address[] memory) {\\n        return usersAllowList;\\n    }\\n\\n    function removeUser(address userAddr) public onlyOwner {\\n        uint256 index = indexOf[userAddr];\\n        if (userAddr != owner && index > 0 && index <= usersAllowList.length) {\\n            // Can t remove account owner from userAllowList\\n            if (index != usersAllowList.length) {\\n                address lastUserAccount = usersAllowList[\\n                    usersAllowList.length - 1\\n                ];\\n\\n                // 1-based indexing\\n                usersAllowList[index - 1] = lastUserAccount;\\n            }\\n\\n            // Remove last empty element\\n            usersAllowList.pop();\\n\\n            // remove index userAccount from mapping\\n            indexOf[userAddr] = 0;\\n\\n            emit PrivacyRemoveUser(address(this), userAddr);\\n        }\\n    }\\n\\n    function isUserAllowed(address userAddr) public view returns (bool) {\\n        bool allow = false;\\n        if (isPublic || indexOf[userAddr] != 0) {\\n            allow = true;\\n        }\\n        return allow;\\n    }\\n}\\n\",\"keccak256\":\"0x79817f5f8b41e6a623893f2c79414910c9ffbf9d5f18f8af1d1b56cf1cc9d6b0\",\"license\":\"MIT\"},\"contracts/factory_contracts/tokenfactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n// import \\\"hardhat/console.sol\\\";\\n// import \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC777/ERC777.sol\\\";\\nimport \\\"./privacy.sol\\\";\\n\\ncontract TokenFactory is ERC777, Privacy {\\n    event ERC777Deployed(\\n        address indexed tokenAddr,\\n        address indexed creatorAddr,\\n        string name,\\n        string symbol,\\n        address[] defaultOperators\\n    );\\n\\n    bytes32 public constant CONTRACT_NAME = keccak256(\\\"TOKEN_FACTORY\\\");\\n    uint256 public constant CONTRACT_VERSION = 1000;\\n\\n    constructor(\\n        address creator,\\n        string memory name,\\n        string memory symbol,\\n        address[] memory defaultOperators\\n    ) ERC777(name, symbol, defaultOperators) {\\n        owner = creator;\\n        usersAllowList.push(owner);\\n        indexOf[owner] = usersAllowList.length;\\n\\n        emit ERC777Deployed(\\n            address(this),\\n            creator,\\n            name,\\n            symbol,\\n            defaultOperators\\n        );\\n    }\\n\\n    function mint(uint256 amount) public onlyOwner {\\n        _mint(msg.sender, amount, \\\"\\\", \\\"\\\");\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, amount);\\n        require(isUserAllowed(msg.sender), \\\"Sorry, this contract is private\\\");\\n    }\\n\\n    function getContractName() public pure returns (bytes32) {\\n        return CONTRACT_NAME;\\n    }\\n\\n    function getContractVersion() public pure returns (uint256) {\\n        return CONTRACT_VERSION;\\n    }\\n}\\n\",\"keccak256\":\"0x258f8cfae62a1ce5e4a3fde9363fb0335c69216b86eab4d0f785a3b07dd631f8\",\"license\":\"MIT\"},\"contracts/mainfactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"./factory_contracts/tokenfactory.sol\\\";\\nimport \\\"./mock_contracts/IAccountRules.sol\\\";\\nimport \\\"./ISubscription.sol\\\";\\nimport \\\"./IFactoryRecords.sol\\\";\\n\\ncontract MainFactory is AccessControlEnumerable {\\n    event Log(string message);\\n    event LogBytes(bytes data);\\n\\n    bytes32 public constant FACTORY_ROLE = keccak256(\\\"FACTORY_ROLE\\\");\\n\\n    IAccountRules public accountRules;\\n    IFactoryRecords public factoryRecords;\\n    ISubscriptionHandler public subscriptionService;\\n\\n    uint8 public TokenFactoryLevel = 0;\\n\\n    modifier requireAccountRules() {\\n        require(address(accountRules) != address(0), \\\"AccountRules not set !\\\");\\n        _;\\n    }\\n\\n    modifier requireFatcoryRecords() {\\n        require(\\n            address(factoryRecords) != address(0),\\n            \\\"Factory records not set !\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier requireSubscription(uint8 level) {\\n        require(\\n            address(subscriptionService) != address(0),\\n            \\\"Subscription service not set !\\\"\\n        );\\n        require(checkSubscription(level), \\\"Subscription not valid, sorry!\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        _setupRole(FACTORY_ROLE, msg.sender);\\n    }\\n\\n    function setAccountRules(address _accountRules)\\n        public\\n        onlyRole(FACTORY_ROLE)\\n    {\\n        accountRules = IAccountRules(_accountRules);\\n    }\\n\\n    function setFactoryRecords(address _factoryRecords)\\n        public\\n        onlyRole(FACTORY_ROLE)\\n    {\\n        factoryRecords = IFactoryRecords(_factoryRecords);\\n    }\\n\\n    function setSubscriptionService(address _subscriptionService)\\n        public\\n        onlyRole(FACTORY_ROLE)\\n    {\\n        subscriptionService = ISubscriptionHandler(_subscriptionService);\\n    }\\n\\n    function checkSubscription(uint8 level)\\n        private\\n        view\\n        requireFatcoryRecords\\n        returns (bool)\\n    {\\n        if (level > 0) {\\n            return subscriptionService.checkSubscription(msg.sender, level);\\n        }\\n        return true;\\n    }\\n\\n    function deployToken(string memory name, string memory symbol) public {\\n        TokenFactory tokenFactory = new TokenFactory(\\n            msg.sender,\\n            name,\\n            symbol,\\n            new address[](0)\\n        );\\n\\n        bytes32 _factoryName = tokenFactory.getContractName();\\n        uint256 _version = tokenFactory.getContractVersion();\\n\\n        AddContractRecord(\\n            address(tokenFactory),\\n            msg.sender,\\n            _factoryName,\\n            _version\\n        );\\n\\n        AddContractPerm(address(tokenFactory));\\n    }\\n\\n    function AddContractPerm(address deployContract)\\n        private\\n        requireAccountRules\\n    {\\n        try accountRules.addAccount(deployContract) returns (bool res) {\\n            if (res) {\\n                emit Log(\\\"AccountRules Added successfully !\\\");\\n            }\\n        } catch Error(string memory reason) {\\n            emit Log(reason);\\n        } catch (bytes memory lowLevelData) {\\n            emit LogBytes(lowLevelData);\\n        }\\n    }\\n\\n    function AddContractRecord(\\n        address deplContract,\\n        address owner,\\n        bytes32 _factoryName,\\n        uint256 _version\\n    ) private requireSubscription(TokenFactoryLevel) {\\n        try\\n            factoryRecords.addDepl(deplContract, owner, _factoryName, _version)\\n        returns (bool res) {\\n            if (res) {\\n                emit Log(\\\"Contract Added successfully to factoryRecords !\\\");\\n            }\\n        } catch Error(string memory reason) {\\n            emit Log(reason);\\n        } catch (bytes memory lowLevelData) {\\n            emit LogBytes(lowLevelData);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe0023a47e0682d7cf63923a53e9c88d564c90d85b3539f290a18b3ba1f42b600\",\"license\":\"MIT\"},\"contracts/mock_contracts/IAccountRules.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IAccountRules {\\n    function addAccount(address account) external returns (bool);\\n\\n    function removeAccount(address account) external returns (bool);\\n\\n    function accountPermitted(address _account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xbf77110bbf2a514ffc31551491fa519c189a051aa8b6f6b700e635b4230b1449\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526004805460ff60a01b191690553480156200001e57600080fd5b506200004b7fdfbefbf47cfe66b701d8cfdbce1de81c821590819cb07e71cb01b6602fb0ee273362000051565b620001b6565b6200006882826200009460201b620006281760201c565b60008281526001602090815260409091206200008f91839062000638620000a4821b17901c565b505050565b620000a08282620000c4565b5050565b6000620000bb836001600160a01b03841662000164565b90505b92915050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620000a0576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001203390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000818152600183016020526040812054620001ad57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620000be565b506000620000be565b613e5580620001c66000396000f3fe60806040523480156200001157600080fd5b50600436106200012d5760003560e01c80637a75611111620000af578063b3f74cac116200007a578063b3f74cac14620002ab578063ca15c87314620002bf578063d547741f14620002d6578063dd514e6014620002ed578063eef4b8c9146200030157600080fd5b80637a756111146200024c5780639010d07c146200027457806391d14854146200028b578063a217fddf14620002a257600080fd5b8063248a9ca311620000fc578063248a9ca314620001b45780632f2ff15d14620001da57806336568abe14620001f15780634260b3741462000208578063685ccb2e146200021f57600080fd5b806301ffc9a7146200013257806304a0fb17146200015e578063059a24fd14620001845780631d12b938146200019d575b600080fd5b620001496200014336600462001378565b62000318565b60405190151581526020015b60405180910390f35b6200017560008051602062003e0083398151915281565b60405190815260200162000155565b6200019b62000195366004620012b7565b62000346565b005b6200019b620001ae366004620013a2565b62000385565b62000175620001c5366004620012f6565b60009081526020819052604090206001015490565b6200019b620001eb36600462001328565b620004ea565b6200019b6200020236600462001328565b62000515565b6200019b62000219366004620012b7565b6200053b565b60035462000233906001600160a01b031681565b6040516001600160a01b03909116815260200162000155565b6004546200026190600160a01b900460ff1681565b60405160ff909116815260200162000155565b620002336200028536600462001356565b6200057a565b620001496200029c36600462001328565b6200059b565b62000175600081565b60045462000233906001600160a01b031681565b62000175620002d0366004620012f6565b620005c4565b6200019b620002e736600462001328565b620005dd565b60025462000233906001600160a01b031681565b6200019b62000312366004620012b7565b620005e9565b60006001600160e01b03198216635a05180f60e01b148062000340575062000340826200064f565b92915050565b60008051602062003e0083398151915262000362813362000686565b50600280546001600160a01b0319166001600160a01b0392909216919091179055565b60408051600080825260208201909252339084908490604051620003a9906200121b565b620003b89493929190620014b1565b604051809103906000f080158015620003d5573d6000803e3d6000fd5b5090506000816001600160a01b031663f5f5ba726040518163ffffffff1660e01b815260040160206040518083038186803b1580156200041457600080fd5b505afa15801562000429573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200044f91906200130f565b90506000826001600160a01b0316638aa104356040518163ffffffff1660e01b815260040160206040518083038186803b1580156200048d57600080fd5b505afa158015620004a2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004c891906200130f565b9050620004d883338484620006fe565b620004e38362000994565b5050505050565b620004f6828262000b87565b600082815260016020526040902062000510908262000638565b505050565b62000521828262000bb1565b600082815260016020526040902062000510908262000c2f565b60008051602062003e0083398151915262000557813362000686565b50600480546001600160a01b0319166001600160a01b0392909216919091179055565b600082815260016020526040812062000594908362000c46565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000818152600160205260408120620003409062000c54565b62000521828262000c5f565b60008051602062003e0083398151915262000605813362000686565b50600380546001600160a01b0319166001600160a01b0392909216919091179055565b62000634828262000c89565b5050565b600062000594836001600160a01b03841662000d11565b60006001600160e01b03198216637965db0b60e01b14806200034057506301ffc9a760e01b6001600160e01b031983161462000340565b6200069282826200059b565b6200063457620006ad816001600160a01b0316601462000d63565b620006ba83602062000d63565b604051602001620006cd92919062001438565b60408051601f198184030181529082905262461bcd60e51b8252620006f59160040162001532565b60405180910390fd5b60045460ff600160a01b820416906001600160a01b0316620007635760405162461bcd60e51b815260206004820152601e60248201527f537562736372697074696f6e2073657276696365206e6f7420736574202100006044820152606401620006f5565b6200076e8162000f59565b620007bc5760405162461bcd60e51b815260206004820152601e60248201527f537562736372697074696f6e206e6f742076616c69642c20736f7272792100006044820152606401620006f5565b60035460405163bdb6f31760e01b81526001600160a01b038781166004830152868116602483015260448201869052606482018590529091169063bdb6f31790608401602060405180830381600087803b1580156200081a57600080fd5b505af19250505080156200084d575060408051601f3d908101601f191682019092526200084a91810190620012d4565b60015b62000915576200085c62001647565b806308c379a01415620008b057506200087462001660565b80620008815750620008b2565b60008051602062003de083398151915281604051620008a1919062001532565b60405180910390a150620004e3565b505b3d808015620008de576040519150601f19603f3d011682016040523d82523d6000602084013e620008e3565b606091505b507f532fd6ea96cfb78bb46e09279a26828b8b493de1a2b8b1ee1face527978a15a581604051620008a1919062001532565b80156200098c5760008051602062003de083398151915260405162000983906020808252602f908201527f436f6e7472616374204164646564207375636365737366756c6c7920746f206660408201526e6163746f72795265636f726473202160881b606082015260800190565b60405180910390a15b505050505050565b6002546001600160a01b0316620009e75760405162461bcd60e51b81526020600482015260166024820152754163636f756e7452756c6573206e6f7420736574202160501b6044820152606401620006f5565b60025460405163744d870f60e11b81526001600160a01b0383811660048301529091169063e89b0e1e90602401602060405180830381600087803b15801562000a2f57600080fd5b505af192505050801562000a62575060408051601f3d908101601f1916820190925262000a5f91810190620012d4565b60015b62000b275762000a7162001647565b806308c379a0141562000ac2575062000a8962001660565b8062000a96575062000ac4565b60008051602062003de08339815191528160405162000ab6919062001532565b60405180910390a15050565b505b3d80801562000af0576040519150601f19603f3d011682016040523d82523d6000602084013e62000af5565b606091505b507f532fd6ea96cfb78bb46e09279a26828b8b493de1a2b8b1ee1face527978a15a58160405162000ab6919062001532565b8015620006345760008051602062003de083398151915260405162000ab69060208082526021908201527f4163636f756e7452756c6573204164646564207375636365737366756c6c79206040820152602160f81b606082015260800190565b60008281526020819052604090206001015462000ba5813362000686565b62000510838362000c89565b6001600160a01b038116331462000c235760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401620006f5565b62000634828262001052565b600062000594836001600160a01b038416620010ba565b6000620005948383620011e2565b600062000340825490565b60008281526020819052604090206001015462000c7d813362000686565b62000510838362001052565b62000c9582826200059b565b62000634576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905562000ccd3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600081815260018301602052604081205462000d5a5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000340565b50600062000340565b6060600062000d7483600262001562565b62000d8190600262001547565b67ffffffffffffffff81111562000da857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801562000dd3576020820181803683370190505b509050600360fc1b8160008151811062000dfd57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811062000e3b57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600062000e6184600262001562565b62000e6e90600162001547565b90505b600181111562000f08576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811062000eb257634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811062000ed757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9362000f0081620015d1565b905062000e71565b508315620005945760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401620006f5565b6003546000906001600160a01b031662000fb65760405162461bcd60e51b815260206004820152601960248201527f466163746f7279207265636f726473206e6f74207365742021000000000000006044820152606401620006f5565b60ff82161562001049576004805460405163338ddb6360e11b8152339281019290925260ff841660248301526001600160a01b03169063671bb6c69060440160206040518083038186803b1580156200100e57600080fd5b505afa15801562001023573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003409190620012d4565b5060015b919050565b6200105e82826200059b565b1562000634576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008181526001830160205260408120548015620011d7576000620010e160018362001584565b8554909150600090620010f79060019062001584565b90508181146200117b5760008660000182815481106200112757634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050808760000184815481106200115957634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b85548690806200119b57634e487b7160e01b600052603160045260246000fd5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505062000340565b600091505062000340565b60008260000182815481106200120857634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b6126ef80620016f183390190565b80356001600160a01b03811681146200104d57600080fd5b600082601f83011262001252578081fd5b813567ffffffffffffffff8111156200126f576200126f62001631565b60405162001288601f8301601f191660200182620015eb565b8181528460208386010111156200129d578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215620012c9578081fd5b620005948262001229565b600060208284031215620012e6578081fd5b8151801515811462000594578182fd5b60006020828403121562001308578081fd5b5035919050565b60006020828403121562001321578081fd5b5051919050565b600080604083850312156200133b578081fd5b823591506200134d6020840162001229565b90509250929050565b6000806040838503121562001369578182fd5b50508035926020909101359150565b6000602082840312156200138a578081fd5b81356001600160e01b03198116811462000594578182fd5b60008060408385031215620013b5578182fd5b823567ffffffffffffffff80821115620013cd578384fd5b620013db8683870162001241565b93506020850135915080821115620013f1578283fd5b50620014008582860162001241565b9150509250929050565b60008151808452620014248160208601602086016200159e565b601f01601f19169290920160200192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351620014728160178501602088016200159e565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351620014a58160288401602088016200159e565b01602801949350505050565b600060018060a01b0380871683526020608081850152620014d660808501886200140a565b8481036040860152620014ea81886200140a565b85810360608701528651808252838801925090830190855b818110156200152257835186168352928401929184019160010162001502565b50909a9950505050505050505050565b6020815260006200059460208301846200140a565b600082198211156200155d576200155d6200161b565b500190565b60008160001904831182151516156200157f576200157f6200161b565b500290565b6000828210156200159957620015996200161b565b500390565b60005b83811015620015bb578181015183820152602001620015a1565b83811115620015cb576000848401525b50505050565b600081620015e357620015e36200161b565b506000190190565b601f8201601f1916810167ffffffffffffffff8111828210171562001614576200161462001631565b6040525050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d11156200165d57600481823e5160e01c5b90565b600060443d10156200166f5790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715620016a057505050505090565b8285019150815181811115620016b95750505050505090565b843d8701016020828501011115620016d45750505050505090565b620016e560208286010187620015eb565b50909594505050505056fe60806040523480156200001157600080fd5b50604051620026ef380380620026ef833981016040819052620000349162000467565b82828282600290805190602001906200004f929190620002da565b50815162000065906003906020850190620002da565b5080516200007b90600490602084019062000369565b5060005b8151811015620000f757600160056000848481518110620000b057634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580620000ee81620006cc565b9150506200007f565b506040516329965a1d60e01b815230600482018190527fac7fbab5f54a3ca8194167523c6753bfeb96a445279294b6125b68cce217705460248301526044820152731820a4b7618bde71dce8cdc73aab6c95905fad24906329965a1d90606401600060405180830381600087803b1580156200017257600080fd5b505af115801562000187573d6000803e3d6000fd5b50506040516329965a1d60e01b815230600482018190527faea199e31a596269b42cdafd93407f14436db6e4cad65417994c2eb37381e05a60248301526044820152731820a4b7618bde71dce8cdc73aab6c95905fad2492506329965a1d9150606401600060405180830381600087803b1580156200020557600080fd5b505af11580156200021a573d6000803e3d6000fd5b5050600c80546001600160a01b03808c166001600160a01b031992831681178455600a80546001810182557fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8018054909416821790935591549254166000908152600b6020526040908190209290925590519095503094507ff1c403b45acd8834bbcb0da8efcdbc714e7315f93f650a2cd8efcdb2b6ab2e639350620002c8925088915087908790620005b2565b60405180910390a3505050506200070a565b828054620002e8906200068f565b90600052602060002090601f0160209004810192826200030c576000855562000357565b82601f106200032757805160ff191683800117855562000357565b8280016001018555821562000357579182015b82811115620003575782518255916020019190600101906200033a565b5062000365929150620003c1565b5090565b82805482825590600052602060002090810192821562000357579160200282015b828111156200035757825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906200038a565b5b80821115620003655760008155600101620003c2565b80516001600160a01b0381168114620003f057600080fd5b919050565b600082601f83011262000406578081fd5b81516001600160401b03811115620004225762000422620006f4565b62000437601f8201601f191660200162000629565b8181528460208386010111156200044c578283fd5b6200045f8260208301602087016200065c565b949350505050565b600080600080608085870312156200047d578384fd5b6200048885620003d8565b602086810151919550906001600160401b0380821115620004a7578586fd5b620004b589838a01620003f5565b95506040880151915080821115620004cb578485fd5b620004d989838a01620003f5565b94506060880151915080821115620004ef578384fd5b818801915088601f83011262000503578384fd5b815181811115620005185762000518620006f4565b8060051b91506200052b84830162000629565b8181528481019084860184860187018d101562000546578788fd5b8795505b8386101562000573576200055e81620003d8565b8352600195909501949186019186016200054a565b50989b979a50959850505050505050565b600081518084526200059e8160208601602086016200065c565b601f01601f19169290920160200192915050565b606081526000620005c7606083018662000584565b602083820381850152620005dc828762000584565b84810360408601528551808252828701935090820190845b818110156200061b5784516001600160a01b031683529383019391830191600101620005f4565b509098975050505050505050565b604051601f8201601f191681016001600160401b0381118282101715620006545762000654620006f4565b604052919050565b60005b83811015620006795781810151838201526020016200065f565b8381111562000689576000848401525b50505050565b600181811c90821680620006a457607f821691505b60208210811415620006c657634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415620006ed57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fd5b611fd5806200071a6000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c8063959b8c3f1161010f578063d95b6371116100a2578063f5f5ba7211610071578063f5f5ba7214610430578063fad8b32a14610456578063fc673c4f14610469578063fe9d93031461047c57600080fd5b8063d95b6371146103c4578063dc9a1535146103d7578063dd62ed3e146103e4578063e424a0d51461041d57600080fd5b8063a0712d68116100de578063a0712d6814610383578063a52ba4e814610396578063a9059cbb146103a9578063b8522043146103bc57600080fd5b8063959b8c3f1461034257806395d89b4114610355578063985751881461035d5780639bd9bbc61461037057600080fd5b8063421b2d8b1161018757806362ad1b831161015657806362ad1b83146102d357806370a08231146102e65780638aa104351461030f5780638da5cb5b1461031757600080fd5b8063421b2d8b1461027d578063556f0dc7146102925780635cbcec4e14610299578063614d08f8146102ac57600080fd5b806318160ddd116101c357806318160ddd1461024057806323b872dd14610252578063313ce5671461026557806338b903331461027457600080fd5b806306e48538146101ea57806306fdde0314610208578063095ea7b31461021d575b600080fd5b6101f261048f565b6040516101ff9190611d98565b60405180910390f35b6102106104f1565b6040516101ff9190611de5565b61023061022b366004611b77565b61057a565b60405190151581526020016101ff565b6001545b6040519081526020016101ff565b610230610260366004611aa7565b610592565b604051601281526020016101ff565b6102446103e881565b61029061028b366004611a37565b61075b565b005b6001610244565b6102906102a7366004611c76565b61083b565b6102447ffcfcd73806a3d50a21e3624e820ff5a4aec7331430c180d0b068ebc34cc0546981565b6102906102e1366004611ae7565b6108ae565b6102446102f4366004611a37565b6001600160a01b031660009081526020819052604090205490565b6103e8610244565b600c5461032a906001600160a01b031681565b6040516001600160a01b0390911681526020016101ff565b610290610350366004611a37565b6108ea565b610210610a08565b61029061036b366004611a37565b610a17565b61029061037e366004611ba2565b610bbd565b610290610391366004611c96565b610be0565b6102306103a4366004611a37565b610c34565b6102306103b7366004611b77565b610c70565b6101f2610d23565b6102306103d2366004611a6f565b610d83565b6009546102309060ff1681565b6102446103f2366004611a6f565b6001600160a01b03918216600090815260086020908152604080832093909416825291909152205490565b61032a61042b366004611c96565b610e25565b7ffcfcd73806a3d50a21e3624e820ff5a4aec7331430c180d0b068ebc34cc05469610244565b610290610464366004611a37565b610e4f565b610290610477366004611bf9565b610f6b565b61029061048a366004611cae565b610fa3565b606060048054806020026020016040519081016040528092919081815260200182805480156104e757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116104c9575b5050505050905090565b60606002805461050090611f23565b80601f016020809104026020016040519081016040528092919081815260200182805461052c90611f23565b80156104e75780601f1061054e576101008083540402835291602001916104e7565b820191906000526020600020905b81548152906001019060200180831161055c57509395945050505050565b600033610588818585610fbe565b5060019392505050565b60006001600160a01b0383166105c35760405162461bcd60e51b81526004016105ba90611e2f565b60405180910390fd5b6001600160a01b0384166106285760405162461bcd60e51b815260206004820152602660248201527f4552433737373a207472616e736665722066726f6d20746865207a65726f206160448201526564647265737360d01b60648201526084016105ba565b60003390506106598186868660405180602001604052806000815250604051806020016040528060008152506110e5565b61068581868686604051806020016040528060008152506040518060200160405280600081525061121c565b6001600160a01b038086166000908152600860209081526040808320938516835292905220548381101561070d5760405162461bcd60e51b815260206004820152602960248201527f4552433737373a207472616e7366657220616d6f756e74206578636565647320604482015268616c6c6f77616e636560b81b60648201526084016105ba565b610721868361071c8785611f0c565b610fbe565b61074f828787876040518060200160405280600081525060405180602001604052806000815250600061138e565b50600195945050505050565b600c546001600160a01b031633146107855760405162461bcd60e51b81526004016105ba90611df8565b6001600160a01b0381166000908152600b602052604090205461083857600a80546001810182557fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80180546001600160a01b0319166001600160a01b03841690811790915590546000828152600b6020908152604091829020839055905182815291929130917ffa5accd15882920e4192e2ef08fdbf6fec3cb87dcbbd5c4a125991ba29ff6d75910160405180910390a3505b50565b600c546001600160a01b031633146108655760405162461bcd60e51b81526004016105ba90611df8565b6009805460ff191682151590811790915560405190815230907fd374566ee7f9ff309985fe4bad42c3e583507bf56e47d7fce62f98fa0ae792109060200160405180910390a250565b6108b83386610d83565b6108d45760405162461bcd60e51b81526004016105ba90611e73565b6108e385858585856001611562565b5050505050565b336001600160a01b038216141561094f5760405162461bcd60e51b8152602060048201526024808201527f4552433737373a20617574686f72697a696e672073656c66206173206f70657260448201526330ba37b960e11b60648201526084016105ba565b6001600160a01b03811660009081526005602052604090205460ff16156109a0573360009081526007602090815260408083206001600160a01b03851684529091529020805460ff191690556109cf565b3360009081526006602090815260408083206001600160a01b03851684529091529020805460ff191660011790555b60405133906001600160a01b038316907ff4caeb2d6ca8932a215a353d0703c326ec2d81fc68170f320eb2ab49e9df61f990600090a350565b60606003805461050090611f23565b600c546001600160a01b03163314610a415760405162461bcd60e51b81526004016105ba90611df8565b6001600160a01b038082166000818152600b6020526040902054600c5490921614801590610a6f5750600081115b8015610a7d5750600a548111155b15610bb957600a548114610b3057600a805460009190610a9f90600190611f0c565b81548110610abd57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316905080600a610ae2600185611f0c565b81548110610b0057634e487b7160e01b600052603260045260246000fd5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550505b600a805480610b4f57634e487b7160e01b600052603160045260246000fd5b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b038416808352600b909152604080832083905551909130917f644f0aaefc0fbcf4d31428d6c50a28df97c755781adcc2da35311c1a8504e7289190a35b5050565b610bdb33848484604051806020016040528060008152506001611562565b505050565b600c546001600160a01b03163314610c0a5760405162461bcd60e51b81526004016105ba90611df8565b61083833826040518060200160405280600081525060405180602001604052806000815250611645565b600954600090819060ff1680610c6157506001600160a01b0383166000908152600b602052604090205415155b15610c6a575060015b92915050565b60006001600160a01b038316610c985760405162461bcd60e51b81526004016105ba90611e2f565b6000339050610cc98182868660405180602001604052806000815250604051806020016040528060008152506110e5565b610cf581828686604051806020016040528060008152506040518060200160405280600081525061121c565b610588818286866040518060200160405280600081525060405180602001604052806000815250600061138e565b6060600a8054806020026020016040519081016040528092919081815260200182805480156104e7576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116104c9575050505050905090565b6000816001600160a01b0316836001600160a01b03161480610dee57506001600160a01b03831660009081526005602052604090205460ff168015610dee57506001600160a01b0380831660009081526007602090815260408083209387168352929052205460ff16155b80610e1e57506001600160a01b0380831660009081526006602090815260408083209387168352929052205460ff165b9392505050565b600a8181548110610e3557600080fd5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b038116331415610eb25760405162461bcd60e51b815260206004820152602160248201527f4552433737373a207265766f6b696e672073656c66206173206f70657261746f6044820152603960f91b60648201526084016105ba565b6001600160a01b03811660009081526005602052604090205460ff1615610f06573360009081526007602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610f32565b3360009081526006602090815260408083206001600160a01b03851684529091529020805460ff191690555b60405133906001600160a01b038316907f50546e66e5f44d728365dc3908c63bc5cfeeab470722c1677e3073a6ac294aa190600090a350565b610f753385610d83565b610f915760405162461bcd60e51b81526004016105ba90611e73565b610f9d84848484611653565b50505050565b610bb933838360405180602001604052806000815250611653565b6001600160a01b0383166110225760405162461bcd60e51b815260206004820152602560248201527f4552433737373a20617070726f76652066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016105ba565b6001600160a01b0382166110845760405162461bcd60e51b815260206004820152602360248201527f4552433737373a20617070726f766520746f20746865207a65726f206164647260448201526265737360e81b60648201526084016105ba565b6001600160a01b0383811660008181526008602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60405163555ddc6560e11b81526001600160a01b03861660048201527f29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe8956024820152600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca9060440160206040518083038186803b15801561116157600080fd5b505afa158015611175573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111999190611a53565b90506001600160a01b0381161561121357604051633ad5cbc160e11b81526001600160a01b038216906375ab9782906111e0908a908a908a908a908a908a90600401611d3e565b600060405180830381600087803b1580156111fa57600080fd5b505af115801561120e573d6000803e3d6000fd5b505050505b50505050505050565b61122886868686611815565b6001600160a01b038516600090815260208190526040902054838110156112a15760405162461bcd60e51b815260206004820152602760248201527f4552433737373a207472616e7366657220616d6f756e7420657863656564732060448201526662616c616e636560c81b60648201526084016105ba565b6001600160a01b038087166000908152602081905260408082208785039055918716815290812080548692906112d8908490611ef4565b92505081905550846001600160a01b0316866001600160a01b0316886001600160a01b03167f06b541ddaa720db2b10a4d0cdac39b8d360425fc073085fac19bc8261467798787878760405161133093929190611ebf565b60405180910390a4846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8660405161137d91815260200190565b60405180910390a350505050505050565b60405163555ddc6560e11b81526001600160a01b03861660048201527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b6024820152600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca9060440160206040518083038186803b15801561140a57600080fd5b505afa15801561141e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114429190611a53565b90506001600160a01b038116156114be576040516223de2960e01b81526001600160a01b038216906223de2990611487908b908b908b908b908b908b90600401611d3e565b600060405180830381600087803b1580156114a157600080fd5b505af11580156114b5573d6000803e3d6000fd5b50505050611558565b8115611558576001600160a01b0386163b156115585760405162461bcd60e51b815260206004820152604d60248201527f4552433737373a20746f6b656e20726563697069656e7420636f6e747261637460448201527f20686173206e6f20696d706c656d656e74657220666f7220455243373737546f60648201526c1ad95b9cd49958da5c1a595b9d609a1b608482015260a4016105ba565b5050505050505050565b6001600160a01b0386166115c35760405162461bcd60e51b815260206004820152602260248201527f4552433737373a2073656e642066726f6d20746865207a65726f206164647265604482015261737360f01b60648201526084016105ba565b6001600160a01b0385166116195760405162461bcd60e51b815260206004820181905260248201527f4552433737373a2073656e6420746f20746865207a65726f206164647265737360448201526064016105ba565b336116288188888888886110e5565b61163681888888888861121c565b6112138188888888888861138e565b610f9d84848484600161186a565b6001600160a01b0384166116b45760405162461bcd60e51b815260206004820152602260248201527f4552433737373a206275726e2066726f6d20746865207a65726f206164647265604482015261737360f01b60648201526084016105ba565b336116c4818660008787876110e5565b6116d18186600087611815565b6001600160a01b038516600090815260208190526040902054848110156117465760405162461bcd60e51b815260206004820152602360248201527f4552433737373a206275726e20616d6f756e7420657863656564732062616c616044820152626e636560e81b60648201526084016105ba565b6001600160a01b0386166000908152602081905260408120868303905560018054879290611775908490611f0c565b92505081905550856001600160a01b0316826001600160a01b03167fa78a9be3a7b862d26933ad85fb11d80ef66b8f972d7cbba06621d583943a40988787876040516117c393929190611ebf565b60405180910390a36040518581526000906001600160a01b038816907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a3505050505050565b61181e33610c34565b610f9d5760405162461bcd60e51b815260206004820152601f60248201527f536f7272792c207468697320636f6e747261637420697320707269766174650060448201526064016105ba565b6001600160a01b0385166118c05760405162461bcd60e51b815260206004820181905260248201527f4552433737373a206d696e7420746f20746865207a65726f206164647265737360448201526064016105ba565b336118ce8160008888611815565b84600160008282546118e09190611ef4565b90915550506001600160a01b0386166000908152602081905260408120805487929061190d908490611ef4565b909155506119239050816000888888888861138e565b856001600160a01b0316816001600160a01b03167f2fe5be0146f74c5bce36c0b80911af6c7d86ff27e89d5cfa61fc681327954e5d87878760405161196a93929190611ebf565b60405180910390a36040518581526001600160a01b038716906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611805565b600082601f8301126119c0578081fd5b813567ffffffffffffffff808211156119db576119db611f74565b604051601f8301601f19908116603f01168101908282118183101715611a0357611a03611f74565b81604052838152866020858801011115611a1b578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215611a48578081fd5b8135610e1e81611f8a565b600060208284031215611a64578081fd5b8151610e1e81611f8a565b60008060408385031215611a81578081fd5b8235611a8c81611f8a565b91506020830135611a9c81611f8a565b809150509250929050565b600080600060608486031215611abb578081fd5b8335611ac681611f8a565b92506020840135611ad681611f8a565b929592945050506040919091013590565b600080600080600060a08688031215611afe578081fd5b8535611b0981611f8a565b94506020860135611b1981611f8a565b935060408601359250606086013567ffffffffffffffff80821115611b3c578283fd5b611b4889838a016119b0565b93506080880135915080821115611b5d578283fd5b50611b6a888289016119b0565b9150509295509295909350565b60008060408385031215611b89578182fd5b8235611b9481611f8a565b946020939093013593505050565b600080600060608486031215611bb6578283fd5b8335611bc181611f8a565b925060208401359150604084013567ffffffffffffffff811115611be3578182fd5b611bef868287016119b0565b9150509250925092565b60008060008060808587031215611c0e578384fd5b8435611c1981611f8a565b935060208501359250604085013567ffffffffffffffff80821115611c3c578384fd5b611c48888389016119b0565b93506060870135915080821115611c5d578283fd5b50611c6a878288016119b0565b91505092959194509250565b600060208284031215611c87578081fd5b81358015158114610e1e578182fd5b600060208284031215611ca7578081fd5b5035919050565b60008060408385031215611cc0578182fd5b82359150602083013567ffffffffffffffff811115611cdd578182fd5b611ce9858286016119b0565b9150509250929050565b60008151808452815b81811015611d1857602081850181015186830182015201611cfc565b81811115611d295782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0387811682528681166020830152851660408201526060810184905260c060808201819052600090611d7990830185611cf3565b82810360a0840152611d8b8185611cf3565b9998505050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611dd95783516001600160a01b031683529284019291840191600101611db4565b50909695505050505050565b602081526000610e1e6020830184611cf3565b6020808252601f908201527f536f7272792c20616374696f6e206e6f7420616c6c6f77206279207573657200604082015260600190565b60208082526024908201527f4552433737373a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b6020808252602c908201527f4552433737373a2063616c6c6572206973206e6f7420616e206f70657261746f60408201526b39103337b9103437b63232b960a11b606082015260800190565b838152606060208201526000611ed86060830185611cf3565b8281036040840152611eea8185611cf3565b9695505050505050565b60008219821115611f0757611f07611f5e565b500190565b600082821015611f1e57611f1e611f5e565b500390565b600181811c90821680611f3757607f821691505b60208210811415611f5857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461083857600080fdfea2646970667358221220802949a04aba80ee339dd1dce57cd303aab4401e4b98d33a46391c239f0319bf64736f6c63430008040033cf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3babdfbefbf47cfe66b701d8cfdbce1de81c821590819cb07e71cb01b6602fb0ee27a2646970667358221220720712c28da44a5683089b346ed29018e01e96314194a8caf6fccd95e618baf164736f6c63430008040033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200012d5760003560e01c80637a75611111620000af578063b3f74cac116200007a578063b3f74cac14620002ab578063ca15c87314620002bf578063d547741f14620002d6578063dd514e6014620002ed578063eef4b8c9146200030157600080fd5b80637a756111146200024c5780639010d07c146200027457806391d14854146200028b578063a217fddf14620002a257600080fd5b8063248a9ca311620000fc578063248a9ca314620001b45780632f2ff15d14620001da57806336568abe14620001f15780634260b3741462000208578063685ccb2e146200021f57600080fd5b806301ffc9a7146200013257806304a0fb17146200015e578063059a24fd14620001845780631d12b938146200019d575b600080fd5b620001496200014336600462001378565b62000318565b60405190151581526020015b60405180910390f35b6200017560008051602062003e0083398151915281565b60405190815260200162000155565b6200019b62000195366004620012b7565b62000346565b005b6200019b620001ae366004620013a2565b62000385565b62000175620001c5366004620012f6565b60009081526020819052604090206001015490565b6200019b620001eb36600462001328565b620004ea565b6200019b6200020236600462001328565b62000515565b6200019b62000219366004620012b7565b6200053b565b60035462000233906001600160a01b031681565b6040516001600160a01b03909116815260200162000155565b6004546200026190600160a01b900460ff1681565b60405160ff909116815260200162000155565b620002336200028536600462001356565b6200057a565b620001496200029c36600462001328565b6200059b565b62000175600081565b60045462000233906001600160a01b031681565b62000175620002d0366004620012f6565b620005c4565b6200019b620002e736600462001328565b620005dd565b60025462000233906001600160a01b031681565b6200019b62000312366004620012b7565b620005e9565b60006001600160e01b03198216635a05180f60e01b148062000340575062000340826200064f565b92915050565b60008051602062003e0083398151915262000362813362000686565b50600280546001600160a01b0319166001600160a01b0392909216919091179055565b60408051600080825260208201909252339084908490604051620003a9906200121b565b620003b89493929190620014b1565b604051809103906000f080158015620003d5573d6000803e3d6000fd5b5090506000816001600160a01b031663f5f5ba726040518163ffffffff1660e01b815260040160206040518083038186803b1580156200041457600080fd5b505afa15801562000429573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200044f91906200130f565b90506000826001600160a01b0316638aa104356040518163ffffffff1660e01b815260040160206040518083038186803b1580156200048d57600080fd5b505afa158015620004a2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004c891906200130f565b9050620004d883338484620006fe565b620004e38362000994565b5050505050565b620004f6828262000b87565b600082815260016020526040902062000510908262000638565b505050565b62000521828262000bb1565b600082815260016020526040902062000510908262000c2f565b60008051602062003e0083398151915262000557813362000686565b50600480546001600160a01b0319166001600160a01b0392909216919091179055565b600082815260016020526040812062000594908362000c46565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000818152600160205260408120620003409062000c54565b62000521828262000c5f565b60008051602062003e0083398151915262000605813362000686565b50600380546001600160a01b0319166001600160a01b0392909216919091179055565b62000634828262000c89565b5050565b600062000594836001600160a01b03841662000d11565b60006001600160e01b03198216637965db0b60e01b14806200034057506301ffc9a760e01b6001600160e01b031983161462000340565b6200069282826200059b565b6200063457620006ad816001600160a01b0316601462000d63565b620006ba83602062000d63565b604051602001620006cd92919062001438565b60408051601f198184030181529082905262461bcd60e51b8252620006f59160040162001532565b60405180910390fd5b60045460ff600160a01b820416906001600160a01b0316620007635760405162461bcd60e51b815260206004820152601e60248201527f537562736372697074696f6e2073657276696365206e6f7420736574202100006044820152606401620006f5565b6200076e8162000f59565b620007bc5760405162461bcd60e51b815260206004820152601e60248201527f537562736372697074696f6e206e6f742076616c69642c20736f7272792100006044820152606401620006f5565b60035460405163bdb6f31760e01b81526001600160a01b038781166004830152868116602483015260448201869052606482018590529091169063bdb6f31790608401602060405180830381600087803b1580156200081a57600080fd5b505af19250505080156200084d575060408051601f3d908101601f191682019092526200084a91810190620012d4565b60015b62000915576200085c62001647565b806308c379a01415620008b057506200087462001660565b80620008815750620008b2565b60008051602062003de083398151915281604051620008a1919062001532565b60405180910390a150620004e3565b505b3d808015620008de576040519150601f19603f3d011682016040523d82523d6000602084013e620008e3565b606091505b507f532fd6ea96cfb78bb46e09279a26828b8b493de1a2b8b1ee1face527978a15a581604051620008a1919062001532565b80156200098c5760008051602062003de083398151915260405162000983906020808252602f908201527f436f6e7472616374204164646564207375636365737366756c6c7920746f206660408201526e6163746f72795265636f726473202160881b606082015260800190565b60405180910390a15b505050505050565b6002546001600160a01b0316620009e75760405162461bcd60e51b81526020600482015260166024820152754163636f756e7452756c6573206e6f7420736574202160501b6044820152606401620006f5565b60025460405163744d870f60e11b81526001600160a01b0383811660048301529091169063e89b0e1e90602401602060405180830381600087803b15801562000a2f57600080fd5b505af192505050801562000a62575060408051601f3d908101601f1916820190925262000a5f91810190620012d4565b60015b62000b275762000a7162001647565b806308c379a0141562000ac2575062000a8962001660565b8062000a96575062000ac4565b60008051602062003de08339815191528160405162000ab6919062001532565b60405180910390a15050565b505b3d80801562000af0576040519150601f19603f3d011682016040523d82523d6000602084013e62000af5565b606091505b507f532fd6ea96cfb78bb46e09279a26828b8b493de1a2b8b1ee1face527978a15a58160405162000ab6919062001532565b8015620006345760008051602062003de083398151915260405162000ab69060208082526021908201527f4163636f756e7452756c6573204164646564207375636365737366756c6c79206040820152602160f81b606082015260800190565b60008281526020819052604090206001015462000ba5813362000686565b62000510838362000c89565b6001600160a01b038116331462000c235760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401620006f5565b62000634828262001052565b600062000594836001600160a01b038416620010ba565b6000620005948383620011e2565b600062000340825490565b60008281526020819052604090206001015462000c7d813362000686565b62000510838362001052565b62000c9582826200059b565b62000634576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905562000ccd3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600081815260018301602052604081205462000d5a5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000340565b50600062000340565b6060600062000d7483600262001562565b62000d8190600262001547565b67ffffffffffffffff81111562000da857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801562000dd3576020820181803683370190505b509050600360fc1b8160008151811062000dfd57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811062000e3b57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600062000e6184600262001562565b62000e6e90600162001547565b90505b600181111562000f08576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811062000eb257634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811062000ed757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9362000f0081620015d1565b905062000e71565b508315620005945760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401620006f5565b6003546000906001600160a01b031662000fb65760405162461bcd60e51b815260206004820152601960248201527f466163746f7279207265636f726473206e6f74207365742021000000000000006044820152606401620006f5565b60ff82161562001049576004805460405163338ddb6360e11b8152339281019290925260ff841660248301526001600160a01b03169063671bb6c69060440160206040518083038186803b1580156200100e57600080fd5b505afa15801562001023573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003409190620012d4565b5060015b919050565b6200105e82826200059b565b1562000634576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008181526001830160205260408120548015620011d7576000620010e160018362001584565b8554909150600090620010f79060019062001584565b90508181146200117b5760008660000182815481106200112757634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050808760000184815481106200115957634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b85548690806200119b57634e487b7160e01b600052603160045260246000fd5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505062000340565b600091505062000340565b60008260000182815481106200120857634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b6126ef80620016f183390190565b80356001600160a01b03811681146200104d57600080fd5b600082601f83011262001252578081fd5b813567ffffffffffffffff8111156200126f576200126f62001631565b60405162001288601f8301601f191660200182620015eb565b8181528460208386010111156200129d578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215620012c9578081fd5b620005948262001229565b600060208284031215620012e6578081fd5b8151801515811462000594578182fd5b60006020828403121562001308578081fd5b5035919050565b60006020828403121562001321578081fd5b5051919050565b600080604083850312156200133b578081fd5b823591506200134d6020840162001229565b90509250929050565b6000806040838503121562001369578182fd5b50508035926020909101359150565b6000602082840312156200138a578081fd5b81356001600160e01b03198116811462000594578182fd5b60008060408385031215620013b5578182fd5b823567ffffffffffffffff80821115620013cd578384fd5b620013db8683870162001241565b93506020850135915080821115620013f1578283fd5b50620014008582860162001241565b9150509250929050565b60008151808452620014248160208601602086016200159e565b601f01601f19169290920160200192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351620014728160178501602088016200159e565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351620014a58160288401602088016200159e565b01602801949350505050565b600060018060a01b0380871683526020608081850152620014d660808501886200140a565b8481036040860152620014ea81886200140a565b85810360608701528651808252838801925090830190855b818110156200152257835186168352928401929184019160010162001502565b50909a9950505050505050505050565b6020815260006200059460208301846200140a565b600082198211156200155d576200155d6200161b565b500190565b60008160001904831182151516156200157f576200157f6200161b565b500290565b6000828210156200159957620015996200161b565b500390565b60005b83811015620015bb578181015183820152602001620015a1565b83811115620015cb576000848401525b50505050565b600081620015e357620015e36200161b565b506000190190565b601f8201601f1916810167ffffffffffffffff8111828210171562001614576200161462001631565b6040525050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d11156200165d57600481823e5160e01c5b90565b600060443d10156200166f5790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715620016a057505050505090565b8285019150815181811115620016b95750505050505090565b843d8701016020828501011115620016d45750505050505090565b620016e560208286010187620015eb565b50909594505050505056fe60806040523480156200001157600080fd5b50604051620026ef380380620026ef833981016040819052620000349162000467565b82828282600290805190602001906200004f929190620002da565b50815162000065906003906020850190620002da565b5080516200007b90600490602084019062000369565b5060005b8151811015620000f757600160056000848481518110620000b057634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580620000ee81620006cc565b9150506200007f565b506040516329965a1d60e01b815230600482018190527fac7fbab5f54a3ca8194167523c6753bfeb96a445279294b6125b68cce217705460248301526044820152731820a4b7618bde71dce8cdc73aab6c95905fad24906329965a1d90606401600060405180830381600087803b1580156200017257600080fd5b505af115801562000187573d6000803e3d6000fd5b50506040516329965a1d60e01b815230600482018190527faea199e31a596269b42cdafd93407f14436db6e4cad65417994c2eb37381e05a60248301526044820152731820a4b7618bde71dce8cdc73aab6c95905fad2492506329965a1d9150606401600060405180830381600087803b1580156200020557600080fd5b505af11580156200021a573d6000803e3d6000fd5b5050600c80546001600160a01b03808c166001600160a01b031992831681178455600a80546001810182557fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8018054909416821790935591549254166000908152600b6020526040908190209290925590519095503094507ff1c403b45acd8834bbcb0da8efcdbc714e7315f93f650a2cd8efcdb2b6ab2e639350620002c8925088915087908790620005b2565b60405180910390a3505050506200070a565b828054620002e8906200068f565b90600052602060002090601f0160209004810192826200030c576000855562000357565b82601f106200032757805160ff191683800117855562000357565b8280016001018555821562000357579182015b82811115620003575782518255916020019190600101906200033a565b5062000365929150620003c1565b5090565b82805482825590600052602060002090810192821562000357579160200282015b828111156200035757825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906200038a565b5b80821115620003655760008155600101620003c2565b80516001600160a01b0381168114620003f057600080fd5b919050565b600082601f83011262000406578081fd5b81516001600160401b03811115620004225762000422620006f4565b62000437601f8201601f191660200162000629565b8181528460208386010111156200044c578283fd5b6200045f8260208301602087016200065c565b949350505050565b600080600080608085870312156200047d578384fd5b6200048885620003d8565b602086810151919550906001600160401b0380821115620004a7578586fd5b620004b589838a01620003f5565b95506040880151915080821115620004cb578485fd5b620004d989838a01620003f5565b94506060880151915080821115620004ef578384fd5b818801915088601f83011262000503578384fd5b815181811115620005185762000518620006f4565b8060051b91506200052b84830162000629565b8181528481019084860184860187018d101562000546578788fd5b8795505b8386101562000573576200055e81620003d8565b8352600195909501949186019186016200054a565b50989b979a50959850505050505050565b600081518084526200059e8160208601602086016200065c565b601f01601f19169290920160200192915050565b606081526000620005c7606083018662000584565b602083820381850152620005dc828762000584565b84810360408601528551808252828701935090820190845b818110156200061b5784516001600160a01b031683529383019391830191600101620005f4565b509098975050505050505050565b604051601f8201601f191681016001600160401b0381118282101715620006545762000654620006f4565b604052919050565b60005b83811015620006795781810151838201526020016200065f565b8381111562000689576000848401525b50505050565b600181811c90821680620006a457607f821691505b60208210811415620006c657634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415620006ed57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fd5b611fd5806200071a6000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c8063959b8c3f1161010f578063d95b6371116100a2578063f5f5ba7211610071578063f5f5ba7214610430578063fad8b32a14610456578063fc673c4f14610469578063fe9d93031461047c57600080fd5b8063d95b6371146103c4578063dc9a1535146103d7578063dd62ed3e146103e4578063e424a0d51461041d57600080fd5b8063a0712d68116100de578063a0712d6814610383578063a52ba4e814610396578063a9059cbb146103a9578063b8522043146103bc57600080fd5b8063959b8c3f1461034257806395d89b4114610355578063985751881461035d5780639bd9bbc61461037057600080fd5b8063421b2d8b1161018757806362ad1b831161015657806362ad1b83146102d357806370a08231146102e65780638aa104351461030f5780638da5cb5b1461031757600080fd5b8063421b2d8b1461027d578063556f0dc7146102925780635cbcec4e14610299578063614d08f8146102ac57600080fd5b806318160ddd116101c357806318160ddd1461024057806323b872dd14610252578063313ce5671461026557806338b903331461027457600080fd5b806306e48538146101ea57806306fdde0314610208578063095ea7b31461021d575b600080fd5b6101f261048f565b6040516101ff9190611d98565b60405180910390f35b6102106104f1565b6040516101ff9190611de5565b61023061022b366004611b77565b61057a565b60405190151581526020016101ff565b6001545b6040519081526020016101ff565b610230610260366004611aa7565b610592565b604051601281526020016101ff565b6102446103e881565b61029061028b366004611a37565b61075b565b005b6001610244565b6102906102a7366004611c76565b61083b565b6102447ffcfcd73806a3d50a21e3624e820ff5a4aec7331430c180d0b068ebc34cc0546981565b6102906102e1366004611ae7565b6108ae565b6102446102f4366004611a37565b6001600160a01b031660009081526020819052604090205490565b6103e8610244565b600c5461032a906001600160a01b031681565b6040516001600160a01b0390911681526020016101ff565b610290610350366004611a37565b6108ea565b610210610a08565b61029061036b366004611a37565b610a17565b61029061037e366004611ba2565b610bbd565b610290610391366004611c96565b610be0565b6102306103a4366004611a37565b610c34565b6102306103b7366004611b77565b610c70565b6101f2610d23565b6102306103d2366004611a6f565b610d83565b6009546102309060ff1681565b6102446103f2366004611a6f565b6001600160a01b03918216600090815260086020908152604080832093909416825291909152205490565b61032a61042b366004611c96565b610e25565b7ffcfcd73806a3d50a21e3624e820ff5a4aec7331430c180d0b068ebc34cc05469610244565b610290610464366004611a37565b610e4f565b610290610477366004611bf9565b610f6b565b61029061048a366004611cae565b610fa3565b606060048054806020026020016040519081016040528092919081815260200182805480156104e757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116104c9575b5050505050905090565b60606002805461050090611f23565b80601f016020809104026020016040519081016040528092919081815260200182805461052c90611f23565b80156104e75780601f1061054e576101008083540402835291602001916104e7565b820191906000526020600020905b81548152906001019060200180831161055c57509395945050505050565b600033610588818585610fbe565b5060019392505050565b60006001600160a01b0383166105c35760405162461bcd60e51b81526004016105ba90611e2f565b60405180910390fd5b6001600160a01b0384166106285760405162461bcd60e51b815260206004820152602660248201527f4552433737373a207472616e736665722066726f6d20746865207a65726f206160448201526564647265737360d01b60648201526084016105ba565b60003390506106598186868660405180602001604052806000815250604051806020016040528060008152506110e5565b61068581868686604051806020016040528060008152506040518060200160405280600081525061121c565b6001600160a01b038086166000908152600860209081526040808320938516835292905220548381101561070d5760405162461bcd60e51b815260206004820152602960248201527f4552433737373a207472616e7366657220616d6f756e74206578636565647320604482015268616c6c6f77616e636560b81b60648201526084016105ba565b610721868361071c8785611f0c565b610fbe565b61074f828787876040518060200160405280600081525060405180602001604052806000815250600061138e565b50600195945050505050565b600c546001600160a01b031633146107855760405162461bcd60e51b81526004016105ba90611df8565b6001600160a01b0381166000908152600b602052604090205461083857600a80546001810182557fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80180546001600160a01b0319166001600160a01b03841690811790915590546000828152600b6020908152604091829020839055905182815291929130917ffa5accd15882920e4192e2ef08fdbf6fec3cb87dcbbd5c4a125991ba29ff6d75910160405180910390a3505b50565b600c546001600160a01b031633146108655760405162461bcd60e51b81526004016105ba90611df8565b6009805460ff191682151590811790915560405190815230907fd374566ee7f9ff309985fe4bad42c3e583507bf56e47d7fce62f98fa0ae792109060200160405180910390a250565b6108b83386610d83565b6108d45760405162461bcd60e51b81526004016105ba90611e73565b6108e385858585856001611562565b5050505050565b336001600160a01b038216141561094f5760405162461bcd60e51b8152602060048201526024808201527f4552433737373a20617574686f72697a696e672073656c66206173206f70657260448201526330ba37b960e11b60648201526084016105ba565b6001600160a01b03811660009081526005602052604090205460ff16156109a0573360009081526007602090815260408083206001600160a01b03851684529091529020805460ff191690556109cf565b3360009081526006602090815260408083206001600160a01b03851684529091529020805460ff191660011790555b60405133906001600160a01b038316907ff4caeb2d6ca8932a215a353d0703c326ec2d81fc68170f320eb2ab49e9df61f990600090a350565b60606003805461050090611f23565b600c546001600160a01b03163314610a415760405162461bcd60e51b81526004016105ba90611df8565b6001600160a01b038082166000818152600b6020526040902054600c5490921614801590610a6f5750600081115b8015610a7d5750600a548111155b15610bb957600a548114610b3057600a805460009190610a9f90600190611f0c565b81548110610abd57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316905080600a610ae2600185611f0c565b81548110610b0057634e487b7160e01b600052603260045260246000fd5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550505b600a805480610b4f57634e487b7160e01b600052603160045260246000fd5b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b038416808352600b909152604080832083905551909130917f644f0aaefc0fbcf4d31428d6c50a28df97c755781adcc2da35311c1a8504e7289190a35b5050565b610bdb33848484604051806020016040528060008152506001611562565b505050565b600c546001600160a01b03163314610c0a5760405162461bcd60e51b81526004016105ba90611df8565b61083833826040518060200160405280600081525060405180602001604052806000815250611645565b600954600090819060ff1680610c6157506001600160a01b0383166000908152600b602052604090205415155b15610c6a575060015b92915050565b60006001600160a01b038316610c985760405162461bcd60e51b81526004016105ba90611e2f565b6000339050610cc98182868660405180602001604052806000815250604051806020016040528060008152506110e5565b610cf581828686604051806020016040528060008152506040518060200160405280600081525061121c565b610588818286866040518060200160405280600081525060405180602001604052806000815250600061138e565b6060600a8054806020026020016040519081016040528092919081815260200182805480156104e7576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116104c9575050505050905090565b6000816001600160a01b0316836001600160a01b03161480610dee57506001600160a01b03831660009081526005602052604090205460ff168015610dee57506001600160a01b0380831660009081526007602090815260408083209387168352929052205460ff16155b80610e1e57506001600160a01b0380831660009081526006602090815260408083209387168352929052205460ff165b9392505050565b600a8181548110610e3557600080fd5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b038116331415610eb25760405162461bcd60e51b815260206004820152602160248201527f4552433737373a207265766f6b696e672073656c66206173206f70657261746f6044820152603960f91b60648201526084016105ba565b6001600160a01b03811660009081526005602052604090205460ff1615610f06573360009081526007602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610f32565b3360009081526006602090815260408083206001600160a01b03851684529091529020805460ff191690555b60405133906001600160a01b038316907f50546e66e5f44d728365dc3908c63bc5cfeeab470722c1677e3073a6ac294aa190600090a350565b610f753385610d83565b610f915760405162461bcd60e51b81526004016105ba90611e73565b610f9d84848484611653565b50505050565b610bb933838360405180602001604052806000815250611653565b6001600160a01b0383166110225760405162461bcd60e51b815260206004820152602560248201527f4552433737373a20617070726f76652066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016105ba565b6001600160a01b0382166110845760405162461bcd60e51b815260206004820152602360248201527f4552433737373a20617070726f766520746f20746865207a65726f206164647260448201526265737360e81b60648201526084016105ba565b6001600160a01b0383811660008181526008602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60405163555ddc6560e11b81526001600160a01b03861660048201527f29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe8956024820152600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca9060440160206040518083038186803b15801561116157600080fd5b505afa158015611175573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111999190611a53565b90506001600160a01b0381161561121357604051633ad5cbc160e11b81526001600160a01b038216906375ab9782906111e0908a908a908a908a908a908a90600401611d3e565b600060405180830381600087803b1580156111fa57600080fd5b505af115801561120e573d6000803e3d6000fd5b505050505b50505050505050565b61122886868686611815565b6001600160a01b038516600090815260208190526040902054838110156112a15760405162461bcd60e51b815260206004820152602760248201527f4552433737373a207472616e7366657220616d6f756e7420657863656564732060448201526662616c616e636560c81b60648201526084016105ba565b6001600160a01b038087166000908152602081905260408082208785039055918716815290812080548692906112d8908490611ef4565b92505081905550846001600160a01b0316866001600160a01b0316886001600160a01b03167f06b541ddaa720db2b10a4d0cdac39b8d360425fc073085fac19bc8261467798787878760405161133093929190611ebf565b60405180910390a4846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8660405161137d91815260200190565b60405180910390a350505050505050565b60405163555ddc6560e11b81526001600160a01b03861660048201527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b6024820152600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca9060440160206040518083038186803b15801561140a57600080fd5b505afa15801561141e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114429190611a53565b90506001600160a01b038116156114be576040516223de2960e01b81526001600160a01b038216906223de2990611487908b908b908b908b908b908b90600401611d3e565b600060405180830381600087803b1580156114a157600080fd5b505af11580156114b5573d6000803e3d6000fd5b50505050611558565b8115611558576001600160a01b0386163b156115585760405162461bcd60e51b815260206004820152604d60248201527f4552433737373a20746f6b656e20726563697069656e7420636f6e747261637460448201527f20686173206e6f20696d706c656d656e74657220666f7220455243373737546f60648201526c1ad95b9cd49958da5c1a595b9d609a1b608482015260a4016105ba565b5050505050505050565b6001600160a01b0386166115c35760405162461bcd60e51b815260206004820152602260248201527f4552433737373a2073656e642066726f6d20746865207a65726f206164647265604482015261737360f01b60648201526084016105ba565b6001600160a01b0385166116195760405162461bcd60e51b815260206004820181905260248201527f4552433737373a2073656e6420746f20746865207a65726f206164647265737360448201526064016105ba565b336116288188888888886110e5565b61163681888888888861121c565b6112138188888888888861138e565b610f9d84848484600161186a565b6001600160a01b0384166116b45760405162461bcd60e51b815260206004820152602260248201527f4552433737373a206275726e2066726f6d20746865207a65726f206164647265604482015261737360f01b60648201526084016105ba565b336116c4818660008787876110e5565b6116d18186600087611815565b6001600160a01b038516600090815260208190526040902054848110156117465760405162461bcd60e51b815260206004820152602360248201527f4552433737373a206275726e20616d6f756e7420657863656564732062616c616044820152626e636560e81b60648201526084016105ba565b6001600160a01b0386166000908152602081905260408120868303905560018054879290611775908490611f0c565b92505081905550856001600160a01b0316826001600160a01b03167fa78a9be3a7b862d26933ad85fb11d80ef66b8f972d7cbba06621d583943a40988787876040516117c393929190611ebf565b60405180910390a36040518581526000906001600160a01b038816907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a3505050505050565b61181e33610c34565b610f9d5760405162461bcd60e51b815260206004820152601f60248201527f536f7272792c207468697320636f6e747261637420697320707269766174650060448201526064016105ba565b6001600160a01b0385166118c05760405162461bcd60e51b815260206004820181905260248201527f4552433737373a206d696e7420746f20746865207a65726f206164647265737360448201526064016105ba565b336118ce8160008888611815565b84600160008282546118e09190611ef4565b90915550506001600160a01b0386166000908152602081905260408120805487929061190d908490611ef4565b909155506119239050816000888888888861138e565b856001600160a01b0316816001600160a01b03167f2fe5be0146f74c5bce36c0b80911af6c7d86ff27e89d5cfa61fc681327954e5d87878760405161196a93929190611ebf565b60405180910390a36040518581526001600160a01b038716906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611805565b600082601f8301126119c0578081fd5b813567ffffffffffffffff808211156119db576119db611f74565b604051601f8301601f19908116603f01168101908282118183101715611a0357611a03611f74565b81604052838152866020858801011115611a1b578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215611a48578081fd5b8135610e1e81611f8a565b600060208284031215611a64578081fd5b8151610e1e81611f8a565b60008060408385031215611a81578081fd5b8235611a8c81611f8a565b91506020830135611a9c81611f8a565b809150509250929050565b600080600060608486031215611abb578081fd5b8335611ac681611f8a565b92506020840135611ad681611f8a565b929592945050506040919091013590565b600080600080600060a08688031215611afe578081fd5b8535611b0981611f8a565b94506020860135611b1981611f8a565b935060408601359250606086013567ffffffffffffffff80821115611b3c578283fd5b611b4889838a016119b0565b93506080880135915080821115611b5d578283fd5b50611b6a888289016119b0565b9150509295509295909350565b60008060408385031215611b89578182fd5b8235611b9481611f8a565b946020939093013593505050565b600080600060608486031215611bb6578283fd5b8335611bc181611f8a565b925060208401359150604084013567ffffffffffffffff811115611be3578182fd5b611bef868287016119b0565b9150509250925092565b60008060008060808587031215611c0e578384fd5b8435611c1981611f8a565b935060208501359250604085013567ffffffffffffffff80821115611c3c578384fd5b611c48888389016119b0565b93506060870135915080821115611c5d578283fd5b50611c6a878288016119b0565b91505092959194509250565b600060208284031215611c87578081fd5b81358015158114610e1e578182fd5b600060208284031215611ca7578081fd5b5035919050565b60008060408385031215611cc0578182fd5b82359150602083013567ffffffffffffffff811115611cdd578182fd5b611ce9858286016119b0565b9150509250929050565b60008151808452815b81811015611d1857602081850181015186830182015201611cfc565b81811115611d295782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0387811682528681166020830152851660408201526060810184905260c060808201819052600090611d7990830185611cf3565b82810360a0840152611d8b8185611cf3565b9998505050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611dd95783516001600160a01b031683529284019291840191600101611db4565b50909695505050505050565b602081526000610e1e6020830184611cf3565b6020808252601f908201527f536f7272792c20616374696f6e206e6f7420616c6c6f77206279207573657200604082015260600190565b60208082526024908201527f4552433737373a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b6020808252602c908201527f4552433737373a2063616c6c6572206973206e6f7420616e206f70657261746f60408201526b39103337b9103437b63232b960a11b606082015260800190565b838152606060208201526000611ed86060830185611cf3565b8281036040840152611eea8185611cf3565b9695505050505050565b60008219821115611f0757611f07611f5e565b500190565b600082821015611f1e57611f1e611f5e565b500390565b600181811c90821680611f3757607f821691505b60208210811415611f5857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461083857600080fdfea2646970667358221220802949a04aba80ee339dd1dce57cd303aab4401e4b98d33a46391c239f0319bf64736f6c63430008040033cf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3babdfbefbf47cfe66b701d8cfdbce1de81c821590819cb07e71cb01b6602fb0ee27a2646970667358221220720712c28da44a5683089b346ed29018e01e96314194a8caf6fccd95e618baf164736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Overload {grantRole} to track enumerable memberships"
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Overload {renounceRole} to track enumerable memberships"
      },
      "revokeRole(bytes32,address)": {
        "details": "Overload {revokeRole} to track enumerable memberships"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4465,
        "contract": "contracts/mainfactory.sol:MainFactory",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)4460_storage)"
      },
      {
        "astId": 4766,
        "contract": "contracts/mainfactory.sol:MainFactory",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)7576_storage)"
      },
      {
        "astId": 8667,
        "contract": "contracts/mainfactory.sol:MainFactory",
        "label": "accountRules",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IAccountRules)8991"
      },
      {
        "astId": 8670,
        "contract": "contracts/mainfactory.sol:MainFactory",
        "label": "factoryRecords",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IFactoryRecords)7973"
      },
      {
        "astId": 8673,
        "contract": "contracts/mainfactory.sol:MainFactory",
        "label": "subscriptionService",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ISubscriptionHandler)8007"
      },
      {
        "astId": 8676,
        "contract": "contracts/mainfactory.sol:MainFactory",
        "label": "TokenFactoryLevel",
        "offset": 20,
        "slot": "4",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAccountRules)8991": {
        "encoding": "inplace",
        "label": "contract IAccountRules",
        "numberOfBytes": "20"
      },
      "t_contract(IFactoryRecords)7973": {
        "encoding": "inplace",
        "label": "contract IFactoryRecords",
        "numberOfBytes": "20"
      },
      "t_contract(ISubscriptionHandler)8007": {
        "encoding": "inplace",
        "label": "contract ISubscriptionHandler",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)7576_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)7576_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)4460_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)4460_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)7576_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 7575,
            "contract": "contracts/mainfactory.sol:MainFactory",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)7275_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)4460_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 4457,
            "contract": "contracts/mainfactory.sol:MainFactory",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 4459,
            "contract": "contracts/mainfactory.sol:MainFactory",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)7275_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 7270,
            "contract": "contracts/mainfactory.sol:MainFactory",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 7274,
            "contract": "contracts/mainfactory.sol:MainFactory",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}